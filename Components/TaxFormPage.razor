@inject TaxFormService service

    <div id="tax-form-pages-inline">
        @if (position == 1){<Step1 NextPage="Next" FinalPage="SubmitReview" />}
        @if (position == 2){<Step2 NextPage="Next" FinalPage="SubmitReview" PrvPage="Prv" />}
        @if (position == 3){<Step3 NextPage="Next" FinalPage="SubmitReview" PrvPage="Prv" />}
        @if (position == 4){<Step4 NextPage="Next" FinalPage="SubmitReview" PrvPage="Prv" />}
        @if (position == 5){<Step5 NextPage="Next" FinalPage="SubmitReview" PrvPage="Prv" />}
        @if (position == 6){<Step6 NextPage="Next" FinalPage="SubmitReview" PrvPage="Prv" />}
    </div>

@code {
    private string Value { set; get; } = "1";
    private int oldposition { set; get; } = 1;
    private int currposition { set; get; } = 1;

    public string next { get; set; } = "animate__animated animate__fadeInRight";
    public string prv { get; set; } = "animate__animated animate__fadeOutLeft";

    public string nextrev { get; set; } = "animate__animated animate__fadeOutRight";
    public string prvrev { get; set; } = "animate__animated animate__fadeInLeft";

    private int taxFormId { set; get; }
    private bool ReloadDependentList { set; get; }
    private bool canDisplay { get; set; } = false;
    private string stepin { get; set; } = "-Start";
    private int position { get; set; } = 1;
    private int direction { get; set; } = 0;
    public string active { get; set; } = " slide-in-bottom";
    public string blockActive { get; set; } = " slide-out-left";
    private List<string> labels = new List<string>() { "Basic Information", "Criteria", "Add Dependents", "Review Dependents", "Child Care Information" };
    DependentList dependentList;

    private void Next(int index)
    {
        if (index == 7)
        {
            SubmitTaxForm();
        }

        if (index < 7)
            position = index;

        active = " slide-in-bottom";
        blockActive = " slide-out-left";

    }
    private void Prv(int index)
    {
        if (index > 0)
            position = index;
        active = " slide-in-bottom";
        blockActive = " slide-out-right";
    }

    private void SubmitReview(int index) {
        if (index > 0)
            position = index;
        active = " slide-in-bottom";
        blockActive = " slide-out-right";
    }
    private void increment()
    {
        if (position == 5)
        {
            SubmitTaxForm();
        }
        direction = 0;
        if (position < 5)
            position = position + 1;

        active = " slide-in-bottom";
        blockActive = " slide-out-left";

    }
    private string getLabel(int positionidex)
    {
        if (labels.Count() > positionidex && positionidex >= 0)
            return labels[positionidex];
        if (positionidex == 5)
            return "Review and Submit";
        return "Return to Dashboard";
    }
    private void decrement()
    {
        direction = 1;
        if (position > 0)
            position = position - 1;
        active = " slide-in-bottom";
        blockActive = " slide-out-right";

        if (position == 0)
            canDisplay = false;
    }
    private void handleClick(int goTo)
    {
        position = goTo;
    }
    private void OnNewTaxYearEvent(int tFormId)
    {
        taxFormId = tFormId;
        if (taxFormId > 0)
        {
            canDisplay = true;
            position = 1;
        }

        StateHasChanged();
    }
    private void OnReloadDependetEvent(bool changed)
    {
        ReloadDependentList = changed;

        dependentList.GetDependets();
        StateHasChanged();
    }

    protected override Task OnInitializedAsync()
    {
        if (taxFormId > 0)
        {
            canDisplay = true;
            position = 1;
        }
        return base.OnInitializedAsync();
    }
    public void SubmitTaxForm()
    {
        var isFiled = service.SubmitTaxForm(taxFormId);
    }

    private void OnValueChanged(ChangeEventArgs args)
    {
        oldposition = int.Parse(Value.ToString());
        Value = args.Value.ToString();
        currposition = int.Parse(args.Value.ToString());
        stepin = Value;
        StateHasChanged();
    }
}
