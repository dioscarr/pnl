
@code
{
    private string Value { set; get; } = "1";
    private int oldposition { set; get; } = 1 ;
    private int currposition { set; get; } = 1;

    public string next { get; set; } = "animate__animated animate__fadeInRight";
    public string prv { get; set; } = "animate__animated animate__fadeOutLeft";

    public string nextrev { get; set; } = "animate__animated animate__fadeOutRight";
    public string prvrev { get; set; } = "animate__animated animate__fadeInLeft";


    private void OnValueChanged(ChangeEventArgs args)
    {
        oldposition = int.Parse(Value.ToString());
        Value = args.Value.ToString();
        currposition = int.Parse(args.Value.ToString());
        stepin = Value;
        StateHasChanged();
    }
}
<div class="filetaxes">

    @if (!canDisplay)
    {
        <NewTaxYear OnNewTaxYearEvent="OnNewTaxYearEvent" />
    }
    @if (canDisplay)
    {
        <div class="taxdetail">
            <div class="detail-taxYear">2017</div>
        </div>
        <MatTabGroup>
            <MatTab Label="Basic information" class="inprogress-existing ">
                <ApplicationHeader TaxFormID="taxFormId" />
                @*<CurrentUserInfo TaxFormID="taxFormId" />
                <CurrentAddress TaxFormID="taxFormId" />*@
            </MatTab>
            <MatTab Label="Criteria" class="stepin-Criteria">
                <Toggled TaxformId="taxFormId" />
            </MatTab>
            <MatTab Label="Add Dependent" cass="stepin-Add-Dependent">
                <DependentForm TaxFormID="taxFormId" OnReloadDependetEvent="OnReloadDependetEvent" />
            </MatTab>
            <MatTab Label="All Dependents" class="stepin-Dependents">
                <DependentList TaxFormID="taxFormId" @ref="dependentList" />
            </MatTab>
            <MatTab Label="Child Care" class="stepin-child-care">
                <ChildCareProvider TaxFormID="taxFormId" />
            </MatTab>
        </MatTabGroup>
        @*<div class="stepin-child-care">
                <FileTaxForm TaxFormId="taxFormId" />
            </div>*@
    }
</div>
<div class="formNav">
    <button>Previous</button>
    <button>Next</button>
</div>

        @code {

            private int taxFormId { set; get; }
            private bool ReloadDependentList { set; get; }
            private bool canDisplay { get; set; } = false;
            private string stepin { get; set; } = "Start";

            DependentList dependentList;

            private void OnNewTaxYearEvent(int tFormId)
            {
                taxFormId = tFormId;
                if (taxFormId > 0)
                {
                    canDisplay = true;
                }

                StateHasChanged();
            }
            private void OnReloadDependetEvent(bool changed)
            {
                ReloadDependentList = changed;

                dependentList.GetDependets();
                StateHasChanged();
            }

            protected override Task OnInitializedAsync()
            {
                if (taxFormId > 0)
                {
                    canDisplay = true;
                }
                return base.OnInitializedAsync();
            }
        }
