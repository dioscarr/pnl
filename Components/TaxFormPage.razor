@inject TaxFormService service


    <div id="tax-form-pages-inline">
        @if (position == 1)
        {<Step1 NextPage="Next"
                FinalPage="SubmitReview"
                TaxFormID="taxFormId"
                CurrentUser="CurrentUser"
                UserCurrentAddress="UserCurrentAddress" />}
        @if (position == 2)
        {<Step2 NextPage="Next"
                FinalPage="SubmitReview"
                PrvPage="Prv"
                TaxFormID="taxFormId"
                CurrentUser="CurrentUser"
                UserCurrentAddress="UserCurrentAddress"
                Dependents="Dependents" />}
        @if (position == 3)
        {<Step3 NextPage="Next" FinalPage="SubmitReview" PrvPage="Prv" TaxFormID="taxFormId" />}
        @if (position == 4)
        {<Step4 NextPage="Next" FinalPage="SubmitReview" PrvPage="Prv" TaxFormID="taxFormId" />}
        @if (position == 5)
        {<Step5 NextPage="Next" FinalPage="SubmitReview" PrvPage="Prv" />}
        @if (position == 6)
        {<Step6 NextPage="Next" FinalPage="SubmitReview" PrvPage="Prv" />}
    </div>


@code {
    //private string Value { set; get; } = "1";
    //private int oldposition { set; get; } = 1;
    //private int currposition { set; get; } = 1;

    //public string next { get; set; } = "animate__animated animate__fadeInRight";
    //public string prv { get; set; } = "animate__animated animate__fadeOutLeft";

    // public string nextrev { get; set; } = "animate__animated animate__fadeOutRight";
    //public string prvrev { get; set; } = "animate__animated animate__fadeInLeft";

    private int taxFormId { set; get; }
    [Parameter]
    public string Source { get; set; }
    [Parameter]
    public int  Id { get; set; }
    private bool ReloadDependentList { set; get; }
    private bool canDisplay { get; set; } = false;
    private string stepin { get; set; } = "-Start";
    private int position { get; set; } = 1;
    private int direction { get; set; } = 0;
    private string applicationStatus { get; set; } = "";
    public string active { get; set; } = " slide-in-bottom";
    public string blockActive { get; set; } = " slide-out-left";
    private List<string> labels = new List<string>() { "Basic Information", "Criteria", "Add Dependents", "Review Dependents", "Child Care Information" };
    private int TaxYear { get; set; } = 0;
    private List<int> TaxYears { get; set; }
    private List<TaxForm> TaxYearsInProcess { get; set; }

    DependentList dependentList;
    public Person CurrentUser { get; set; }
    public Address UserCurrentAddress { get; set; }
    private List<Dependent> Dependents { get; set; }

    protected override Task OnInitializedAsync()
    {
        TaxYears = new List<int>();
        taxFormId = Id;
        CheckIfTaxExist();
        if (taxFormId > 0)
        {

            position = 1;
            GetUserInfo();
            GetCurrentUserAddress();
            GetDependets();
        }
        return base.OnInitializedAsync();
    }

    private void Next(int index)
    {
        if (index == 7)
        {
            SubmitTaxForm();
        }

        if (index < 7)
        {
            position = index;
        }

        active = " slide-in-bottom";
        blockActive = " slide-out-left";

    }
    private void Prv(int index)
    {
        if (index > 0)
            position = index;
        active = " slide-in-bottom";
        blockActive = " slide-out-right";
    }
    public void GetDependets()
    {
        if (taxFormId > 0)
        {
            Dependents = new List<Dependent>();
            Dependents = service.GetDependets(taxFormId);
            StateHasChanged();
        }
    }

    private void SubmitReview(int index)
    {
        if (index > 0)
            position = index;

        SubmitTaxForm();

    }


    private void GetUserInfo()
    {
        CurrentUser = service.GetCurrentUser(taxFormId);
    }
    private void GetCurrentUserAddress()
    {
        UserCurrentAddress = service.GetCurrentUserAddress();
    }
    private void increment()
    {
        if (position == 5)
        {
            SubmitTaxForm();
        }
        direction = 0;
        if (position < 5)
            position = position + 1;

        active = " slide-in-bottom";
        blockActive = " slide-out-left";

    }
    private string getLabel(int positionidex)
    {
        if (labels.Count() > positionidex && positionidex >= 0)
            return labels[positionidex];
        if (positionidex == 5)
            return "Review and Submit";
        return "Return to Dashboard";
    }
    private void decrement()
    {
        direction = 1;
        if (position > 0)
            position = position - 1;
        active = " slide-in-bottom";
        blockActive = " slide-out-right";

        if (position == 0)
            canDisplay = false;
    }
    private void handleClick(int goTo)
    {
        position = goTo;
    }
    private void OnNewTaxYearEvent(int tFormId)
    {
        taxFormId = tFormId;
        if (taxFormId > 0)
        {
            canDisplay = true;
            position = 1;

        }


    }
    private void OnReloadDependetEvent(bool changed)
    {
        ReloadDependentList = changed;

        dependentList.GetDependets();
        StateHasChanged();
    }


    public void SubmitTaxForm()
    {
        var isFiled = service.SubmitTaxForm(taxFormId);
    }

    //private void OnValueChanged(ChangeEventArgs args)
    //{
    //    oldposition = int.Parse(Value.ToString());
    //    Value = args.Value.ToString();
    //    currposition = int.Parse(args.Value.ToString());
    //    stepin = Value;
    //    StateHasChanged();
    //}

    private void CheckIfTaxExist()
    {
        var (id, status) = service.CheckIfCurrentTaxYearExist();
        if (id != 0 && status == Source)
        {
            canDisplay = true;
            taxFormId = id;
            applicationStatus = status;
        }
    }

    private void HandleTaxYearChange(ChangeEventArgs args)
    {
        if (int.TryParse(args.Value?.ToString(), out int taxYear))
        {
            TaxYear = taxYear;
        }
    }
    private async Task CheckIfTaxExist(ChangeEventArgs args)
    {
        if (int.TryParse(args.Value?.ToString(), out int taxYear))
        {
            TaxYear = taxYear;

            TaxForm t = await service.CheckIfTaxExist(TaxYear);
            if (t != null)
            {
                taxFormId = t.ID;
            }
            StateHasChanged();
        }
    }
    private async Task CreateNewTaxFormAsync()
    {
        if (taxFormId > 0)
        {
            OnNewTaxYearEvent(taxFormId);

        }
        else if (TaxYear.ToString().Count() == 4)
        {
            TaxForm t = await service.CreateNewTaxFormAsync(TaxYear);
            taxFormId = t.ID;
            TaxYears = new List<int>();

            OnNewTaxYearEvent(t.ID);
        }
        StateHasChanged();
    }
}
