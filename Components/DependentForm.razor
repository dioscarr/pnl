@inject ITaxFormService service

<div class="">
    <div class="dependentlist-info">
        If any dependent please complete the following form.
    </div>

    <EditForm Model="dependent" OnValidSubmit="AddDependent" class="add-dependent-form">
        <DataAnnotationsValidator />
        <InputText @bind-Value="dependent.FirstName" class="form-control-sm" />
        <ValidationMessage style="color:red;" For="()=>dependent.FirstName" />


        <InputText @bind-Value="dependent.LastName" class="form-control-sm col-sm-12 " />
        <ValidationMessage style="color:red;" For="()=>dependent.LastName" />


        <InputDate @bind-Value="dependent.Birthday" class="form-control-sm col-sm-12 " />
        <ValidationMessage style="color:red;" For="()=>dependent.Birthday" />

        <InputText @bind-Value="dependent.RelationshipName" placeholder="Relationship" class="form-control-sm"/>

        <ValidationMessage style="color:red;" For="()=>dependent.RelationshipName" />

        <InputNumber @bind-Value="dependent.MonthInHome" placeholder="Month In Home" class="form-control-sm"/>
        <ValidationMessage style="color:red;" For="()=>dependent.MonthInHome" />


        <InputSelect @bind-Value="dependent.isUsCitizen" class="form-control-sm col-sm-12">
            <option value=""></option>
            <option value="true">Yes</option>
            <option value="false">No</option>
        </InputSelect>
        <ValidationMessage style="color:red;" For="()=>dependent.isUsCitizen" />

        <InputSelect @bind-Value="dependent.ResidentUSCanadaMexicolastyear" class="form-control-sm col-sm-12">
            <option value=""></option>
            <option value="true">Yes</option>
            <option value="false">No</option>
        </InputSelect>
        <ValidationMessage style="color:red;" For="()=>dependent.ResidentUSCanadaMexicolastyear" />

        <InputSelect @bind-Value="dependent.SingleorMarriedAsOf" class="form-control-sm col-sm-12">
            <option value=""></option>
            <option value="true">Yes</option>
            <option value="false">No</option>
        </InputSelect>
        <ValidationMessage style="color:red;" For="()=>dependent.SingleorMarriedAsOf" />

        <InputSelect @bind-Value="dependent.FullTimeStudentLastYear" class="form-control-sm col-sm-12">
            <option value=""></option>
            <option value="true">Yes</option>
            <option value="false">No</option>
        </InputSelect>
        <ValidationMessage style="color:red;" For="()=>dependent.FullTimeStudentLastYear" />

        <InputSelect @bind-Value="dependent.TotallyPermanentlyDisabled" class="form-control-sm col-sm-12">
            <option value=""></option>
            <option value="true">Yes</option>
            <option value="false">No</option>
        </InputSelect>
        <ValidationMessage style="color:red;" For="()=>dependent.TotallyPermanentlyDisabled" />

        <button type="submit" class="btn-Add-Dependent " @onclick="AddDependent">Add Dependent</button>
    </EditForm>
</div>

@code {
        [Parameter]
        public int TaxFormID { get; set; }
        [Parameter]
        public EventCallback<bool> OnReloadDependetEvent { get; set; }

        public Dependent dependent { get; set; }

        private string FirstName { get; set; }
        private string LastName { get; set; }
        private DateTime Birthday { get; set; }
        private string SSN { get; set; }
        private int MonthInHome { get; set; }
        private string RelationshipName { get; set; }
        private string Code { get; set; }
        private void HandleFirstNameChange(ChangeEventArgs args) => FirstName = args.Value?.ToString();
        private void HandleLastNameChange(ChangeEventArgs args) => LastName = args.Value?.ToString();
        private void HandleBirthdayChange(ChangeEventArgs args)
        {
            if (DateTime.TryParse(args.Value?.ToString(), out DateTime birthday))
            {
                Birthday = birthday;
            }
        }
        private void HandleSSNChange(ChangeEventArgs args) => SSN = args.Value?.ToString();
        private void HandleMonthInHomeChange(ChangeEventArgs args)
        {
            if (int.TryParse(args.Value?.ToString(), out int monthInHome))
            {
                MonthInHome = monthInHome;
            }
        }
        private void HandleRelationshipNameChange(ChangeEventArgs args) => RelationshipName = args.Value?.ToString();
        private void HandleCodeChange(ChangeEventArgs args) => Code = args.Value?.ToString();

        protected override void OnInitialized()
        {
            dependent = new Dependent();
            base.OnInitialized();
        }

        private async Task AddDependent()
        
    {
            dependent.TaxFormID = TaxFormID;
            var d = await service.AddDependentAsync(dependent);
            if (dependent.id > 0)
            {
                await OnReloadDependetEvent.InvokeAsync(true);
            }
            dependent = new Dependent();
        }
}
