@inject TaxFormService service

<Paper Style="padding:20px;">
    <Typography Variant="@TypographyVariant.Button" Display="@Display.Block" GutterBottom> Dependents </Typography>
    <EditForm Model="dependent" OnValidSubmit="AddDependent">
        <DataAnnotationsValidator/>        
        <Grid Container Style="padding:20px;">
            <Grid Item ExtraSmall="GridSize.Twelve" Large="GridSize.Three" Style="padding:20px 0;">
                <InputText @bind-Value="dependent.FirstName" placeholder="first name" />
                <ValidationMessage style="color:red;" For="()=>dependent.FirstName"/>
            </Grid>
            <Grid Item ExtraSmall="GridSize.Twelve" Large="GridSize.Three" Style="padding:20px 0;">
                <InputText @bind-Value="dependent.LastName" placeholder="first name" />
                <ValidationMessage style="color:red;" For="()=>dependent.LastName" />
            </Grid>
            <Grid Item ExtraSmall="GridSize.Twelve" Large="GridSize.Three" Style="padding:20px 0;">
                <InputDate @bind-Value="dependent.Birthday" placeholder="birthday" />
                <ValidationMessage style="color:red;" For="()=>dependent.Birthday" />
            </Grid>
            <Grid Item ExtraSmall="GridSize.Twelve" Large="GridSize.Three" Style="padding:20px 0;">
                <InputText @bind-Value="dependent.SSN" placeholder="SSN" />
                <ValidationMessage style="color:red;" For="()=>dependent.SSN" />
            </Grid>
            <Grid Item ExtraSmall="GridSize.Twelve" Large="GridSize.Three" Style="padding:20px 0;">
                <InputNumber @bind-Value="dependent.MonthInHome" placeholder="Month In Home" />
                <ValidationMessage style="color:red;" For="()=>dependent.MonthInHome" />
            </Grid>
            <Grid Item ExtraSmall="GridSize.Twelve" Large="GridSize.Three" Style="padding:20px 0;">
                <InputText @bind-Value="dependent.RelationshipName" placeholder="Relationship" />
                <ValidationMessage style="color:red;" For="()=>dependent.RelationshipName" />
            </Grid>
            <Grid Item ExtraSmall="GridSize.Twelve" Large="GridSize.Three" Style="padding:20px 0;">
                <InputText @bind-Value="dependent.Code" placeholder="Code" />
                <ValidationMessage style="color:red;" For="()=>dependent.Code" />
            </Grid>
            <Grid Item ExtraSmall="GridSize.Twelve" Large="GridSize.Three" Style="padding:20px 0;">
                <Button Type="ButtonType.Submit" Variant="@ButtonVariant.Contained" Color="@Color.Primary" Size="@Size.Small" Style="margin: 8px;"> 
                    <StartIcon><SaveIcon /></StartIcon><ChildContent Context="SubmitButton">Add New Dependent</ChildContent>
                </Button>
                    </Grid>
                </Grid>
    </EditForm>        
    </Paper>

    @code {
        [Parameter]
        public int TaxFormID { get; set; }
        [Parameter]
        public EventCallback<bool> OnReloadDependetEvent { get; set; }

        public Dependent dependent { get; set; }

        private string FirstName { get; set; }
        private string LastName { get; set; }
        private DateTime Birthday { get; set; }
        private string SSN { get; set; }
        private int MonthInHome { get; set; }
        private string RelationshipName { get; set; }
        private string Code { get; set; }
        private void HandleFirstNameChange(ChangeEventArgs args) => FirstName = args.Value?.ToString();
        private void HandleLastNameChange(ChangeEventArgs args) => LastName = args.Value?.ToString();
        private void HandleBirthdayChange(ChangeEventArgs args)
        {
            if (DateTime.TryParse(args.Value?.ToString(), out DateTime birthday))
            {
                Birthday = birthday;
            }
        }
        private void HandleSSNChange(ChangeEventArgs args) => SSN = args.Value?.ToString();
        private void HandleMonthInHomeChange(ChangeEventArgs args)
        {
            if (int.TryParse(args.Value?.ToString(), out int monthInHome))
            {
                MonthInHome = monthInHome;
            }
        }
        private void HandleRelationshipNameChange(ChangeEventArgs args) => RelationshipName = args.Value?.ToString();
        private void HandleCodeChange(ChangeEventArgs args) => Code = args.Value?.ToString();        

        protected override void OnInitialized()
        {
            dependent = new Dependent();
            base.OnInitialized();
        }

        private async Task AddDependent()
        {
            dependent.TaxFormID = TaxFormID;
            var d = await service.AddDependentAsync(dependent);
            if (dependent.id > 0)
            {
                await OnReloadDependetEvent.InvokeAsync(true);
            }
            dependent = new Dependent();
        }
    }
