@inject TaxFormService service
    <div class="TaxYearsInProcess">
@foreach (var item in TaxYearsInProcess)
{
        <button style="background-color:white;" @onclick="async() => { TaxYear = item.TaxYear; FilingStatus = item.FilingStatusID; await CreateNewTaxFormAsync(); }" Variant="@ButtonVariant.Contained" Color="@Color.White" Size="@Size.Large">
            @item.TaxYear
        </button>
}
    </div>
    <div class="TaxYears">
       
@foreach (var item in TaxYears)
{
        <button class="Taxyear" @onclick="()=>CheckIfTaxExist(item)">
            <div>Tax Return</div>
            <div>@item</div>
            <div>Continue..</div>
        </button>
}
    </div>

@if (isFilingStatusVisiable)
{
    <div class="isFilingStatusVisiable">
        <select @onchange="(ChangeEventArgs args) => { HandleFilingStatusChange(args); StateHasChanged(); }">
            <option value="-1">Select Filing Status</option>
            @foreach (var value in filingStatuses)
            {
                <option value="@value.Id">@value.Name</option>
            }
        </select>
    </div>
}
@if (isSubmitVisiable || FilingStatus > 0)
{
    <div class="FilingStatus">
        <Button Type="ButtonType.Button" OnClick="@CreateNewTaxFormAsync" Variant="@ButtonVariant.Contained" Color="@Color.Primary" Size="@Size.Small">
            <ChildContent>Open Application</ChildContent>
        </Button>
    </div>
}
@code {
    [Parameter]
    public EventCallback<int> OnNewTaxYearEvent { get; set; }
    private int TaxYear { get; set; } = 0;
    private List<int> TaxYears { get; set; }
    private List<TaxForm> TaxYearsInProcess { get; set; }
    private int FilingStatus { get; set; } = -1;
    private int TaxFormId { set; get; } = 0;
    private bool isFilingStatusVisiable { get; set; } = false;
    private bool isSubmitVisiable { get; set; } = false;
    public List<FilingStatus> filingStatuses { get; set; }


    protected override void OnInitialized()
    {
        TaxYears = new List<int>();
        (TaxYears, TaxYearsInProcess) = service.GetTaxYears();
        filingStatuses = new List<FilingStatus>();
        filingStatuses = service.GetfilingStatuses();
        base.OnInitialized();
    }

    private void HandleTaxYearChange(ChangeEventArgs args)
    {
        if (int.TryParse(args.Value?.ToString(), out int taxYear))
        {
            TaxYear = taxYear;
        }
    }
    private void HandleFilingStatusChange(ChangeEventArgs args)
    {

        if (int.TryParse(args.Value?.ToString(), out int filingstatus))
        {
            FilingStatus = filingstatus;
        }
        if (FilingStatus > 0)
        {
            isSubmitVisiable = true;
        }
        else
        {
            isSubmitVisiable = false;
        }
    }
    private async Task CheckIfTaxExist(int taxyear)
    {
        TaxYear = taxyear;
        isFilingStatusVisiable = true;
        TaxForm t = await service.CheckIfTaxExist(TaxYear);
        if (t != null)
        {
            TaxFormId = t.ID;
        }
        StateHasChanged();
    }


    private async Task CreateNewTaxFormAsync()
    {
        TaxForm t = await service.CreateNewTaxFormAsync(TaxYear, FilingStatus);
        TaxFormId = t.ID;
        TaxYears = new List<int>();
        TaxYears.Add(TaxYear);
        await OnNewTaxYearEvent.InvokeAsync(t.ID);
        StateHasChanged();
    }
}
