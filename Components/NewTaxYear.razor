@inject TaxFormService service



@code {
    [Parameter]
    public EventCallback<int> OnNewTaxYearEvent { get; set; }

    private int TaxYear { get; set; } = 0;
    private List<int> TaxYears { get; set; }
    private List<TaxForm> TaxYearsInProcess { get; set; }
    public List<state> states { get; set; }
    private int FilingStatus { get; set; } = -1;
    private int TaxFormId { set; get; } = 0;
    private bool isFilingStatusVisiable { get; set; } = false;
    private bool isSubmitVisiable { get; set; } = false;
    public List<FilingStatus> filingStatuses { get; set; }
    public string selectedState { get; set; }
    private bool FileNewPosition { get; set; } = true;
    private bool FileNew { get; set; } = false;


    private string setFileNewPosition(bool value)
    {
        FileNewPosition = value;
        return "";
    }

    protected override void OnInitialized()
    {
        TaxYears = new List<int>();
        (TaxYears, TaxYearsInProcess) = service.GetTaxYears();
        states = service.GetStates();
        base.OnInitialized();
    }

    private void HandleTaxYearChange(ChangeEventArgs args)
    {
        if (int.TryParse(args.Value?.ToString(), out int taxYear))
        {
            TaxYear = taxYear;
        }
    }
    private async Task CheckIfTaxExist(ChangeEventArgs args)
    {
        if (int.TryParse(args.Value?.ToString(), out int taxYear))
        {
            TaxYear = taxYear;

            TaxForm t = await service.CheckIfTaxExist(TaxYear);
            if (t != null)
            {
                TaxFormId = t.ID;
            }
            StateHasChanged();
        }
    }
    private async Task CreateNewTaxFormAsync()
    {
        if (TaxFormId > 0)
        {
            await OnNewTaxYearEvent.InvokeAsync(TaxFormId);
            
        }
        else if (TaxYear.ToString().Count() == 4)
        {
            TaxForm t = await service.CreateNewTaxFormAsync(TaxYear);
            TaxFormId = t.ID;
            TaxYears = new List<int>();

            await OnNewTaxYearEvent.InvokeAsync(t.ID);
        }
            StateHasChanged();
    }
}
