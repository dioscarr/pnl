@inject TaxFormService service

<div style="width: 100%; margin-top: 24px;">
    @if (HasSelection)
    {
        @SelectedCount 
                
        <button @onclick="DeleteDependents">
            <DeleteIcon />
        </button>
    }
    else
    {
        <p>Dependents</p>
    }
    <div>
        <table id="add-dependent-list">
            <thead>
                <tr>
                    <td>FirstName</td>
                    <td>Last Name</td>
                    <td>D.O.B</td>
                    <td>SSN</td>
                    <td>Month In Home</td>
                    <td>RelationshipB</td>
                    <td>Code</td>
                </tr>
            </thead>
        @foreach (var row in Dependents)
        {
            <tbody>
                <tr>
                    <td>
        1                @row.FirstName
                    </td>
                        <td>
                        @row.LastName
                    </td>
                    <td>
                        @row.Birthday.ToShortDateString()`
                    </td>
                    <td>
                        @row.SSN
                    </td>
                    <td>
                        @row.MonthInHome.ToString()
                    </td>
                    <td>
                        @row.RelationshipName
                    </td>
                    <td>
                        @row.Code
                    </td>
                </tr>
            </tbody>
        }
        </table>
        
    </div>
    
    
        <Switch Checked="@Dense" OnChange="@OnDenseChanged" />
    
</div>

@code {
    [Parameter]
    public int TaxFormID { get; set; } = 0;


    private List<Dependent> Dependents { get; set; }
    protected override Task OnInitializedAsync()
    {
        GetDependets();

        return base.OnInitializedAsync();
    }
    public void GetDependets()
    {
        if (TaxFormID > 0)
        {
            Dependents = new List<Dependent>();
            Dependents = service.GetDependets(TaxFormID);
            StateHasChanged();
        }
    }






    private string OrderBy { set; get; } = "Calories";

    private Sort Direction { set; get; } = Sort.Ascending;

    private string SortMessage => "sort " + (Direction == Sort.Descending ? "descending" : "ascending");

    private RenderFragment CreateSortableColumn(string name, string label)
    {
        return@<TableSortLabel Active="@(OrderBy == name)"
                               Direction="@Direction"
                               OnClick="@CreateOnSortClick(name)">
        @label
        @if (OrderBy == name)
        {
            <span class="demo-sort-visually-hidden">
                @SortMessage
            </span>
        }
        </TableSortLabel>;
    }

    private EventCallback<EventArgs> CreateOnSortClick(string name)
    {
        return EventCallback.Factory.Create<System.EventArgs>(this, (_) =>
        {
            HandleSortClick(name);
        });
    }

    private IEnumerable<Dependent> GetSortedRows()
    {
        if (Direction == Sort.Ascending)
        {
            if (OrderBy == "FirstName")
                return Dependents.OrderBy(row => row.FirstName);
            else if (OrderBy == "LastName")
                return Dependents.OrderBy(row => row.LastName);
            else if (OrderBy == "Birthday")
                return Dependents.OrderBy(row => row.Birthday);
            else if (OrderBy == "SSN")
                return Dependents.OrderBy(row => row.SSN);
            else if (OrderBy == "MonthInHome")
                return Dependents.OrderBy(row => row.MonthInHome);
            else if (OrderBy == "RelationshipName")
                return Dependents.OrderBy(row => row.RelationshipName);
            else if (OrderBy == "Code")
                return Dependents.OrderBy(row => row.Code);
        }
        else
        {
            if (OrderBy == "FirstName")
                return Dependents.OrderByDescending(row => row.FirstName);
            else if (OrderBy == "LastName")
                return Dependents.OrderByDescending(row => row.LastName);
            else if (OrderBy == "Birthday")
                return Dependents.OrderByDescending(row => row.Birthday);
            else if (OrderBy == "SSN")
                return Dependents.OrderByDescending(row => row.SSN);
            else if (OrderBy == "MonthInHome")
                return Dependents.OrderByDescending(row => row.MonthInHome);
            else if (OrderBy == "RelationshipName")
                return Dependents.OrderByDescending(row => row.RelationshipName);
            else if (OrderBy == "Code")
                return Dependents.OrderByDescending(row => row.Code);

        }
        return Dependents;
    }

    private void HandleSortClick(string name)
    {
        if (OrderBy == name)
        {
            Direction = Direction == Sort.Ascending ? Sort.Descending : Sort.Ascending;
        }
        else
        {
            Direction = Sort.Ascending;
        }

        OrderBy = name;

        StateHasChanged();
    }

    private string media = "@media";

    private string ToolbarClass => $"demo-table-toolbar{(HasSelection ? " demo-table-toolbar-hilight" : "")}";

    private bool Dense { set; get; } = false;

    private Size Size => Dense ? Size.Small : Size.Medium;

    private bool AnySelected => HasSelection && SelectedCount < Dependents.Count;

    private bool AllSelected => Dependents.All(row => row.Selected);

    private int SelectedCount => Dependents.Count(row => row.Selected);

    private bool HasSelection => SelectedCount > 0;

    private int RowsPerPage => 6;

    private int EmptyRows => RowsPerPage - Dependents.Count;

    private int EmptyHeight => (Dense ? 33 : 53) * EmptyRows;

    private void OnDenseChanged(EventArgs args)
    {
        Dense = !Dense;

        StateHasChanged();
    }

    private void OnSelectAllClick(EventArgs args)
    {
        var allSelected = AllSelected;

        Dependents.ForEach(row => row.Selected = !allSelected);

        StateHasChanged();
    }
    private void DeleteDependents()
    {
        Dependents = service.DeleteDependents(Dependents.Where(c => c.Selected == true).ToList(), TaxFormID);

        StateHasChanged();
    }
}
