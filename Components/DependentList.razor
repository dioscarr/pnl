@inject TaxFormService service

<div style="width: 100%; margin-top: 24px;">
    <Paper Style="width: 100%; overflow-x: auto;">
        <Toolbar Class="@ToolbarClass">
            @if (HasSelection)
            {
                <Typography Class="demo-table-toolbar-title"
                            Color="@Color.Inherit"
                            Variant="@TypographyVariant.Subtitle1">
                    @SelectedCount selected
                </Typography>
                <IconButton aria-label="delete">
                    <DeleteIcon />
                </IconButton>
            }
            else
            {
                <Typography Class="demo-table-toolbar-title"
                            Variant="@TypographyVariant.H6"
                            Id="tableTitle">
                    Dependents
                </Typography>
                <IconButton aria-label="filter list">
                    <FilterListIcon />
                </IconButton>
            }
        </Toolbar>
        <div>
            <Table Style="min-width: 650px"
                   aria-label="simple table">
                <TableHead>
                    <TableRow>
                        <TableCell Padding="@Padding.Checkbox">
                            <Checkbox Indeterminate="@AnySelected"
                                      Checked="@AllSelected"
                                      OnChange="@OnSelectAllClick"
                                      InputProps="@(new Dictionary<string, object>{{ "aria-label", $"select all dependents" }})" />
                        </TableCell>
                        <TableCell>
                            @CreateSortableColumn("FirstName", "First Name")
                        </TableCell>
                        <TableCell Align="@Align.Right">
                            @CreateSortableColumn("LastName", "Last Name")
                        </TableCell>
                        <TableCell Align="@Align.Right">                           
                            @CreateSortableColumn("Birthday", "D.O.B")
                        </TableCell>
                        <TableCell Align="@Align.Right">                            
                            @CreateSortableColumn("SSN", "SSN")
                        </TableCell>
                        <TableCell Align="@Align.Right">                            
                            @CreateSortableColumn("MonthInHome", "Month In Home")
                        </TableCell>
                        <TableCell Align="@Align.Right">                            
                            @CreateSortableColumn("RelationshipName", "RelationshipB")
                        </TableCell>
                        <TableCell Align="@Align.Right">                            
                            @CreateSortableColumn("Code", "Code")
                        </TableCell>
                    </TableRow>
                </TableHead>
                <TableBody>
                    @foreach (var row in Dependents)
                    {
                        <TableRow Hover
                                  @key="@row.id"
                                  OnClick="@((_) => row.Selected = !row.Selected)"
                                  TabIndex="-1"
                                  Selected="@row.Selected"
                                  aria-checked="@row.Selected"
                                  Role="checkbox">
                            <TableCell Padding="@Padding.Checkbox">
                                <Checkbox Checked="@row.Selected"
                                          InputProps="@(new Dictionary<string, object>{{ "aria-labelledby", $"enhanced-table-checkbox-{row.FirstName}" }})" />
                            </TableCell>
                            <TableCell Component="th"
                                       Scope="row">
                                @row.FirstName
                            </TableCell>
                            <TableCell Align="@Align.Right">
                                @row.LastName
                            </TableCell>
                            <TableCell Align="@Align.Right">
                                @row.Birthday.ToShortDateString()
                            </TableCell>
                            <TableCell Align="@Align.Right">
                                @row.SSN
                            </TableCell>
                            <TableCell Align="@Align.Right">
                                @row.MonthInHome.ToString()
                            </TableCell>
                            <TableCell Align="@Align.Right">
                                @row.RelationshipName
                            </TableCell>
                            <TableCell Align="@Align.Right">
                                @row.Code
                            </TableCell>
                        </TableRow>
                    }
                    @if (EmptyRows > 0)
                    {
                        <TableRow Style="@($"height: {EmptyHeight}px;")">
                            <TableCell colspan="6" />
                        </TableRow>
                    }
                </TableBody>
            </Table>
        </div>
    </Paper>
    <FormControlLabel Label="Dense padding">
        <Switch Checked="@Dense"
                OnChange="@OnDenseChanged" />
    </FormControlLabel>
</div>

@code {
    [Parameter]
    public int TaxFormID { get; set; } = 0;


    private List<Dependent> Dependents { get; set; }
    protected override Task OnInitializedAsync()
    {
        GetDependets();

        return base.OnInitializedAsync();
    }
    public void GetDependets()
    {
        if (TaxFormID > 0)
        {
            Dependents = new List<Dependent>();
            Dependents = service.GetDependets(TaxFormID);
            StateHasChanged();
        }
    }






    private string OrderBy { set; get; } = "Calories";

    private Sort Direction { set; get; } = Sort.Ascending;

    private string SortMessage => "sort " + (Direction == Sort.Descending ? "descending" : "ascending");

    private RenderFragment CreateSortableColumn(string name, string label)
    {
        return@<TableSortLabel Active="@(OrderBy == name)"
                               Direction="@Direction"
                               OnClick="@CreateOnSortClick(name)">
        @label
        @if (OrderBy == name)
        {
            <span class="demo-sort-visually-hidden">
                @SortMessage
            </span>
        }
        </TableSortLabel>;
    }

    private EventCallback<EventArgs> CreateOnSortClick(string name)
    {
        return EventCallback.Factory.Create<System.EventArgs>(this, (_) =>
        {
            HandleSortClick(name);
        });
    }

    private IEnumerable<Dependent> GetSortedRows()
    {
        if (Direction == Sort.Ascending)
        {
        if (OrderBy == "FirstName")
        return Dependents.OrderBy(row => row.FirstName);
        else if (OrderBy == "LastName")
        return Dependents.OrderBy(row => row.LastName);
        else if (OrderBy == "Birthday")
        return Dependents.OrderBy(row => row.Birthday);
        else if (OrderBy == "SSN")
        return Dependents.OrderBy(row => row.SSN);
        else if (OrderBy == "MonthInHome")
        return Dependents.OrderBy(row => row.MonthInHome);
        else if (OrderBy == "RelationshipName")
        return Dependents.OrderBy(row => row.RelationshipName);
        else if (OrderBy == "Code")
        return Dependents.OrderBy(row => row.Code);
        }
        else
        {
        if (OrderBy == "FirstName")
        return Dependents.OrderByDescending(row => row.FirstName);
        else if (OrderBy == "LastName")
        return Dependents.OrderByDescending(row => row.LastName);
        else if (OrderBy == "Birthday")
        return Dependents.OrderByDescending(row => row.Birthday);
        else if (OrderBy == "SSN")
        return Dependents.OrderByDescending(row => row.SSN);
        else if (OrderBy == "MonthInHome")
        return Dependents.OrderByDescending(row => row.MonthInHome);
        else if (OrderBy == "RelationshipName")
        return Dependents.OrderByDescending(row => row.RelationshipName);
        else if (OrderBy == "Code")
        return Dependents.OrderByDescending(row => row.Code);

        }
        return Dependents;
        }

        private void HandleSortClick(string name)
        {
        if (OrderBy == name)
        {
        Direction = Direction == Sort.Ascending ? Sort.Descending : Sort.Ascending;
        }
        else
        {
        Direction = Sort.Ascending;
        }

        OrderBy = name;

        StateHasChanged();
        }

        private string media = "@media";

        private string ToolbarClass => $"demo-table-toolbar{(HasSelection ? " demo-table-toolbar-hilight" : "")}";

        private bool Dense { set; get; } = false;

        private Size Size => Dense ? Size.Small : Size.Medium;

        private bool AnySelected => HasSelection && SelectedCount < Dependents.Count;

        private bool AllSelected => Dependents.All(row => row.Selected);

        private int SelectedCount => Dependents.Count(row => row.Selected);

        private bool HasSelection => SelectedCount > 0;

        private int RowsPerPage => 6;

        private int EmptyRows => RowsPerPage - Dependents.Count;

        private int EmptyHeight => (Dense ? 33 : 53) * EmptyRows;

        private void OnDenseChanged(EventArgs args)
        {
        Dense = !Dense;

        StateHasChanged();
        }

        private void OnSelectAllClick(EventArgs args)
        {
        var allSelected = AllSelected;

        Dependents.ForEach(row => row.Selected = !allSelected);

        StateHasChanged();
    }
}
