@inject pnl.Models.TaxFormService tService

<div class="taxPanel">
    <div class="archived-title">Archived</div>
    <div class="tax-archived-years">
    @foreach (TaxForm item in TaxArchived)
    {
        <div class="archived-detail" @onclick="()=>GetTaxArchivedTaxInfo(item.ID)">@item.TaxYear</div>
    }
    </div>
    <div class="tax-archived">       
        <div>
            @if (SelectedTaxForm.taxtForm.isFiled != false)
            {
                @(SelectedTaxForm.taxtForm.isFiled == true ? "The information has been submitted." : "")
            }
            </div>
        <div class="taxpanel-DependentsClaimed">
            @if (SelectedTaxForm.taxtForm.DependentsClaimed != null) 
            { 
                @foreach (var item in SelectedTaxForm.taxtForm.DependentsClaimed)
                {
                    <div>@item.FirstName, @item.LastName</div>
                    <div>@item.Birthday, <span>@item.SSN</span></div>
                    <div>Time at Home @item.RelationshipName</div>
                    <div>Relationship @item.RelationshipName</div>
                    <div>Code @item.Code</div>
                }
            }
        </div>
        <div class="taxpanel-criteria">
            @if (SelectedTaxForm.taxtForm.TaxFormCriterias != null)
            {
                @foreach (var item in SelectedTaxForm.taxtForm.TaxFormCriterias)
                {
                    <div>@item.Name</div>
                }
            }
            </div>
        <div>
            <a class="nav-link text-dark" href="/Report/GetPdf?TaxFormId=@SelectedTaxForm.taxtForm.ID" target="_blank">Download Summary</a>
        </div>
    </div>
</div>
@code{
    public EventCallback<int> OnNewTaxYearEvent { get; set; }
    private int TaxYear { get; set; } = 0;
    private List<int> TaxYears { get; set; }
    private List<TaxForm> TaxYearsInProcess { get; set; }
    private List<TaxForm> TaxArchived { get; set; }
    private ReportData SelectedTaxForm { get; set; }
    private List<TaxFormCriteria> Criterias { get; set; }
    private int FilingStatus { get; set; } = -1;
    private int TaxFormId { set; get; } = 0;
    private bool isFilingStatusVisiable { get; set; } = false;
    private bool isSubmitVisiable { get; set; } = false;
    public List<FilingStatus> filingStatuses { get; set; }
    public string Detail { set; get; } = "this is a test content";


    protected override void OnInitialized()
    {
        TaxYears = new List<int>();
        (TaxYears, TaxYearsInProcess, TaxArchived) = tService.GetTaxYearsAndArchived();
        filingStatuses = new List<FilingStatus>();
        filingStatuses = tService.GetfilingStatuses();
        Criterias = new List<TaxFormCriteria>();
        SelectedTaxForm = new ReportData();
        base.OnInitialized();
    }

    private void HandleTaxYearChange(ChangeEventArgs args)
    {
        if (int.TryParse(args.Value?.ToString(), out int taxYear))
        {
            TaxYear = taxYear;
        }
    }
    private void HandleFilingStatusChange(ChangeEventArgs args)
    {

        if (int.TryParse(args.Value?.ToString(), out int filingstatus))
        {
            FilingStatus = filingstatus;
        }
        if (FilingStatus > 0)
        {
            isSubmitVisiable = true;
        }
        else
        {
            isSubmitVisiable = false;
        }
    }
    private async Task CheckIfTaxExist(int taxyear)
    {
        TaxYear = taxyear;
        isFilingStatusVisiable = true;
        TaxForm t = await tService.CheckIfTaxExist(TaxYear);
        if (t != null)
        {
            TaxFormId = t.ID;
        }
        StateHasChanged();
    }
    private async Task CreateNewTaxFormAsync()
    {
        TaxForm t = await tService.CreateNewTaxFormAsync(TaxYear, FilingStatus);
        TaxFormId = t.ID;
        TaxYears = new List<int>();
        TaxYears.Add(TaxYear);
        await OnNewTaxYearEvent.InvokeAsync(t.ID);
        StateHasChanged();
    }
    private void GetTaxArchivedTaxInfo(int id)
    {

        SelectedTaxForm = tService.GetReport(id);
    }
}
