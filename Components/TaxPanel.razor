@inject pnl.Models.TaxFormService tService

<div id="taxPanel">
    @foreach (TaxForm item in TaxYearsInProcess)
    {
        <div class="tax-archived-years">
            <div class="archived-detail">@item.TaxYear</div>
        </div>
    }

    @foreach (TaxForm item in TaxYearsInProcess)
    {
        <div class="tax-archived-detail @(DateTime.Now.Year == item.TaxYear)?"activeArchived":"")>
            <div class="detail-taxYear">@item.TaxYear</div>
            <div class="detail-taxYear-filing">@item.Filingstatus</div>            
            <div class="detail-taxYear-date-updated">Dependent Claimed @item.DependentsClaimed.Count()</div>
            <div class="detail-taxYear-date-updated-val">@DateTime.Now.ToShortDateString()</div>
        </div>
    }

    </div>

@code{
public EventCallback<int> OnNewTaxYearEvent { get; set; }
private int TaxYear { get; set; } = 0;
private List<int> TaxYears { get; set; }
private List<TaxForm> TaxYearsInProcess { get; set; }
private int FilingStatus { get; set; } = -1;
private int TaxFormId { set; get; } = 0;
private bool isFilingStatusVisiable { get; set; } = false;
private bool isSubmitVisiable { get; set; } = false;
public List<FilingStatus> filingStatuses { get; set; }


protected override void OnInitialized()
{
    TaxYears = new List<int>();
    (TaxYears, TaxYearsInProcess) = tService.GetTaxYears();
    filingStatuses = new List<FilingStatus>();
    filingStatuses = tService.GetfilingStatuses();
    base.OnInitialized();
}

private void HandleTaxYearChange(ChangeEventArgs args)
{
    if (int.TryParse(args.Value?.ToString(), out int taxYear))
    {
        TaxYear = taxYear;
    }
}
private void HandleFilingStatusChange(ChangeEventArgs args)
{

    if (int.TryParse(args.Value?.ToString(), out int filingstatus))
    {
        FilingStatus = filingstatus;
    }
    if (FilingStatus > 0)
    {
        isSubmitVisiable = true;
    }
    else
    {
        isSubmitVisiable = false;
    }
}
private async Task CheckIfTaxExist(int taxyear)
{
    TaxYear = taxyear;
    isFilingStatusVisiable = true;
    TaxForm t = await tService.CheckIfTaxExist(TaxYear);
    if (t != null)
    {
        TaxFormId = t.ID;
    }
    StateHasChanged();
}


private async Task CreateNewTaxFormAsync()
{
    TaxForm t = await tService.CreateNewTaxFormAsync(TaxYear, FilingStatus);
    TaxFormId = t.ID;
    TaxYears = new List<int>();
    TaxYears.Add(TaxYear);
    await OnNewTaxYearEvent.InvokeAsync(t.ID);
    StateHasChanged();
}
}
